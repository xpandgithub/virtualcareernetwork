<?php /*
The Virtual Career Network (VCN) is an "open source, open content" workforce services and online learning delivery platform built and operated by the American Association of Community Colleges (AACC) under a grant from the Employment and Training Administration (ETA) of the United States Department of Labor (DOL).

Copyright (C) 2012 American Association of Community Colleges

This file is part of the source code for the Virtual Career Network.

The Virtual Career Network is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

The Virtual Career Network is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
*/ ?>


<?php
// 
// VCNUser -- all functionality related to VCN user data
//
// The VCNUser module is intended to operate as a singleton global object, with the following
// public interfaces:
//
// To get user data: functions are at vcnuser.inc
//   vcnuser_get_zip()
//   vnuser_get_distance()
//   vcnuser_get_st() 
//   vcnuser_get_onetcode() 
//   vcnuser_get_awlevel() 
//   other get methods to be added
// 
// To set user data:
//   invoke block "profiler"
//   other form blocks to be added  
//

/**
 * Implements hook_help().
 */
function vcnuser_help($path, $arg) {
  if ($path == 'admin/help#vcnuser') {
    return t('User and user profile functionality for VCN.');
  }
}

/**
 * Implements hook_user_view().
 * redirect users from drupal default user view page to cma profile page
 */
function vcnuser_user_view($account, $view_mode, $langcode) {
	drupal_goto("cma/profile");
}

/**
 * implements hook_init to initialize global user object
 */

function vcnuser_init() {
	
	module_load_include('inc', 'vcnuser', 'includes/vcnuser.class'); // vcnuser class file must be included to create user object with vcnuser_get_user_values() function
	module_load_include('inc', 'vcnuser', 'includes/vcnuser'); // Public functions to get User url/session/cma values through out site 
	
	vcnuser_get_user_info(); // Manage user session and get user basic info including drupal uid, cma user id, user name, cma first/last name, provider id...
	vcnuser_get_user_values(); // User url/session/cma values for zipcode, education level, aw level, onetcode, distance
}

/**
 * User global variables/object for user basic info including drupal uid, cma user id, user name, cma first/last name, provider id...
 * Need to change name of some variables once logic is working fine.
 */
function vcnuser_get_user_info() {

	global $user;

	// Check if current session id is same as old one, if not reset entry of cma user table
	// Only happens when user does login/register //session id gets change.
	$session_id = session_id(); 
	if (isset($_SESSION['old_session_id'])) {
		if ($_SESSION['old_session_id'] != $session_id) {
			// Reset session id in cma user table
			vcnuser_reset_session_id();
		}
	}
	$_SESSION['old_session_id'] = $session_id;

	//set globals
	global $user_info; // Use this variable instead of individual global variables.
	$user_info = array();

	$user_info['session_id'] = $session_id; // Current user session id // for logged in user $user->sid; //drupal_session_start(); //drupal_session_generate(); //drupal_session_regenerate();

	$user_info['uid'] = isset($user->uid) ? $user->uid : 0; // Drupal user id

  $user_info['drupal_username'] = isset($user->name) ? $user->name : "";  // set the drupal username 
  
	$user_info['name'] = isset($user->name) ? $user->name : ""; // Update name with vcn user "firstname" if available

	$user_info['vcn_user_name'] = isset($user->name) ? $user->name : ""; // Update vcn_user_name with vcn user "firstname lastname"

	$user_info['is_drupal_username'] = true; // ser as per name value // flag to indicate if username ($user_info['name']) is coming from Drupal (username) or CMA (firstname)

	$user_info['user_roles'] = isset($user->roles) ? $user->roles : array(); // drupal user roles array

	$user_info['mail'] = isset($user->mail) ? $user->mail : NULL; // drupal user email id

	$user_info['vcn_user_id'] = $GLOBALS['vcn_user_id'] = 0; // cma user id update along with cma values : available for both logged in and anonymous user

	$user_info['is_user_logged_in'] = $GLOBALS['is_user_logged_in'] = (isset($user->uid) && $user->uid > 0) ? true : false; // check either global d7 user object to get user role or uid. if uid = 0, it's non logged in user.

	$user_info['user_provider_id'] = 0; // Provider id // cma user table join with cma provider table to find out if user is provider or not

	$user_info['logged_in_user_default_zipcode'] = NULL; // upadate with cma user zipcode

	// Get cma user info if any
	// set/update variables ($username, $name, $is_drupal_username, $cma_uid, $user_provider_id, $logged_in_user_default_zipcode) as per result.
	// Most of info we need for logged in user only, but cma_uid/vcn_user_id is needed for anonymous users too at most of module pages for navigation or cma listing. 
	vcnuser_get_user_cma_info();
	
	// get drupal destination as referral and set it to session for any future bounceback/redirect. Used for login/register-autologin at hook_user_login
	$drupal_referral_destination = drupal_get_destination();	
	if(strpos($drupal_referral_destination["destination"], "user") === false && !((!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'))) { // Skip AJAX request // skip user login/register/forgot-password and any other core drupal user pages.
		$_SESSION['drupal_referral_destination'] = $drupal_referral_destination["destination"];
	}
	
}

/**
 *  Reset session id in cma user table 
 *  Only happens when user does login/register and session id gets change with that
 */
function vcnuser_reset_session_id() {

	$params = array('old_session_id' => $_SESSION['old_session_id'], 'session_id' => session_id(), 'industry' => vcn_get_industry() ); 
	$result = vcn_rest_wrapper('vcncmasvc', 'vcncmauser', 'reset-session-id', $params, 'xml', 'post', false);
	
	if(isset($result) && (string)$result->status != "success" && display_debug_detail()){
		error_log ("Unable to migrate session to logged in user");
		drupal_set_message('Unable to migrate session to logged in user.');
	} 
}

/**
 * Get cma user info if any
 * set/update gloabl variables/object (name, vcn_user_name, is_drupal_username, vcn_user_id/cma_uid, user_provider_id, logged_in_user_default_zipcode) as per result.
 */
function vcnuser_get_user_cma_info($is_cma_user_id_required = false) {

	global $user_info;

	$is_provider_user_id_required = in_array("provider", $user_info['user_roles']) ? true : false ;

	// Get cma user info if any
	// set/update variables ($username, $name, $is_drupal_username, $cma_uid, $user_provider_id, $logged_in_user_default_zipcode) as per result.
	$params = array('drupal_user_id' => $user_info['uid'], 'session_id' => $user_info['session_id'], 'industry' => vcn_get_industry(),
					 'is_cma_user_id_required' => $is_cma_user_id_required,
					 'is_provider_user_id_required' => $is_provider_user_id_required );
	$userdata = vcn_rest_wrapper('vcncmasvc', 'vcncmauser', 'get-cma-user-info', $params, 'xml', 'post', false);
	 
	$user_info['vcn_user_id'] = $GLOBALS['vcn_user_id'] = (int)$userdata->userinfo->userid;
			
	if($user_info['uid'] > 0) {
	
		if((string)$userdata->userinfo->firstname != "") {
			$user_info['name'] = vcn_custom_aes_decrypt((string)$userdata->userinfo->firstname);
			$user_info['is_drupal_username'] = false;
			$user_info['vcn_user_name'] = vcn_custom_aes_decrypt((string)$userdata->userinfo->firstname)." ".vcn_custom_aes_decrypt((string)$userdata->userinfo->lastname);
		}
		$user_info['vcn_user_first_name'] = vcn_custom_aes_decrypt((string)$userdata->userinfo->firstname);
		$user_info['vcn_user_last_name'] = vcn_custom_aes_decrypt((string)$userdata->userinfo->lastname);		
				
		if($is_provider_user_id_required){
			$user_info['user_provider_id'] = $userdata->userinfo->providerunitidlist; // Comma seperated list if more than one
		}
				
		$user_info['logged_in_user_default_zipcode'] = (int)$userdata->userinfo->zipcode;
	}
			
}

/**
 * create global user object with all URL, session and CMA user values of VCNUser class
 */ 
 
$vcnuser = new stdClass();

function vcnuser_get_user_values() {
	global $user_info;
	
	$industry_code = vcn_get_industry_code();
	
    $vcnuser = new VCNUser();
	$GLOBALS['vcnuser'] = $vcnuser;
	$current_path_array = explode("/", $_SERVER['REQUEST_URI']);
	
	// first, fill values from URL
	
	$find_zip_key = array_search('zip', $current_path_array);
	if ($find_zip_key) {
	  $vcnuser->set_url_zip($current_path_array[$find_zip_key + 1]);
	}
	
    $find_distance_key = array_search('distance', $current_path_array);
	if ($find_distance_key) {
	  $vcnuser->set_url_distance($current_path_array[$find_distance_key + 1]);
	}
	
	$find_st_key = array_search('st', $current_path_array);
	if ($find_st_key) {
	  $vcnuser->set_url_st($current_path_array[$find_st_key + 1]);
	}
	
	$find_onetcode_key = array_search('onetcode', $current_path_array);
	if ($find_onetcode_key) {
	  $vcnuser->set_url_onetcode($current_path_array[$find_onetcode_key + 1]);
	}
	
	$find_awlevel_key = array_search('awlevel', $current_path_array);
	if ($find_awlevel_key) {
	  $vcnuser->set_url_awlevel($current_path_array[$find_awlevel_key + 1]);
	} else {
		$session_onetcode = isset($_SESSION['vcnuser_onetcode_'.$industry_code]) ? $_SESSION['vcnuser_onetcode_'.$industry_code] : NULL;
		$onetcode = vcnuser_get_onetcode();
		if (isset($onetcode)) {
			if ($onetcode != $session_onetcode) { 
				// if user selects new career then get minimum education for the selected career.
				// if they are looking at the same career keep the education level they had selected for the career
				// eg: if users select "Acute Care Nurse" (min education is Associate's degree) and "bachelors degree" and submit the user selection form, "bachelor degree" will be in the min education cookie.
				// now if they explore the website and go to career details page for "Acute Care Nurse" and click on Find Programs link, they should go to get qualified page with "Acute care nurse" as the career and "Bachelors degree"
				// but if they go to career detail page of some other career and click on Find programs link, go to the get qualified page with minimum education of that particular career selected
				
				/*$min_education_array = vcn_calculate_max_edu_for_career($onetcode, FALSE);
				$vcnuser->set_url_awlevel($max_education_array['max_education_id']);*/
				
				$all_education_id = vcn_get_all_education_id();
				$vcnuser->set_url_awlevel($all_education_id);
			}
		}
	}
	
	// next, fill values from session
	
	if (isset($_COOKIE['d6_d7_zipcode_share'])) {
	  $vcnuser->set_session_zip($_COOKIE['d6_d7_zipcode_share']);
	}
	
	if (isset($_COOKIE['vcnuser_distance'])) {
	  $vcnuser->set_session_distance($_COOKIE['vcnuser_distance']);
	}
	
	//if (isset($_COOKIE['vcnuser_st'])) {
	//  $vcnuser->set_session_st($_COOKIE['vcnuser_st']);
	//}
	
	if (isset($_SESSION['vcnuser_onetcode_'.$industry_code])) {
	  $vcnuser->set_session_onetcode($_SESSION['vcnuser_onetcode_'.$industry_code]);
	}
	
	if (isset($_COOKIE['vcnuser_awlevel'])) {
	  $vcnuser->set_session_awlevel($_COOKIE['vcnuser_awlevel']);
	}
	
	// next, fill value from CMA
	
	if ($user_info['is_user_logged_in']) {
      $vcnuser->set_cma_zip($user_info['logged_in_user_default_zipcode']);
	}

}

// ========= User Login, Registration forms theming ================

/* Implementing hook_menu_alter
 * Hiding the default tabs on the user registration and login page so we can customize them using our logic and styles*/
function vcnuser_menu_alter(&$item) {
	$item['user/register']['type'] = MENU_CALLBACK;
	$item['user/login']['type'] = MENU_CALLBACK;
}

function vcnuser_menu_local_tasks_alter(&$data) {
	if (!empty($data['tabs'])) {
		foreach($data['tabs'][0]['output'] as $key => $value) {
			if(($value['#link']['path'] == 'user/%/view') || ($value['#link']['path'] == 'user/%/edit')) {
				unset($data['tabs'][0]['output'][$key]);
			}
		}
	}
}


/**
 * Implementation of hook_form_alter for registration and login page
 */

function vcnuser_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case 'user_login':
			$form['actions']['submit']['#value'] = t('Sign In');
			$form['actions']['submit']['#attributes']['class'][] = 'vcn-button';
			$form['actions']['submit']['#attributes']['title'] = 'Sign In';
			break;
		case 'user_pass':
			$form['name']['#description'] = t('Enter your username or e-mail.');
			$form['actions']['submit']['#attributes']['class'][] = 'vcn-button';
			$form['actions']['submit']['#attributes']['title'] = 'E-mail new password';
			break;
		case 'user_register_form':
			$form['actions']['submit']['#attributes']['class'][] = 'vcn-button';
			$form['actions']['submit']['#attributes']['title'] = 'Create New Account';
			$form['zipcode'] = array(
					'#type' => 'textfield',
					'#title' => t('ZIP Code'),
					'#size' => 25,
					'#maxlength' => 5,
					'#required' => TRUE,
					'#description' => t('This ZIP Code will be used as default value for ZIP Code based searches.'),
			);
			$form['#validate'][] = '_vcnuser_register_zip_validation';
      $form['#submit'][] = '_vcnuser_user_register_moodle_submit';
			break;
		case 'user_profile_form':
			$form['picture']['#access'] = FALSE; // hiding the upload picture
			$form['mimemail']['#access'] = FALSE; // hiding mimemail options where users can select if they want to receive plain emails
			$form['actions']['submit']['#attributes']['class'][] = 'vcn-button';
			$form['actions']['submit']['#attributes']['title'] = 'Save';
      $form['#submit'][] = '_vcnuser_user_profile_moodle_submit';
			break;
		case 'user_pass_reset':
			$form['actions']['submit']['#attributes']['class'][] = 'vcn-button';
			$form['actions']['submit']['#attributes']['title'] = 'Reset Password';
			break;
		default:
			break;
	}
}

/*
 * Form submit handler for user_profile_form for updating moodle user
 */
function _vcnuser_user_profile_moodle_submit($form, &$form_state) {

  vcn_persist_moodle_user('update', $form_state);
}

/*
 * Form submit handler for user_register_form for creating moodle user
 */
function _vcnuser_user_register_moodle_submit($form, &$form_state) {
  
  vcn_persist_moodle_user('insert', $form_state);

}

/*
 * Implementing hook_user_insert
 * Used to insert the newly created users data into hvcp/moodle DB
 * */
function vcnuser_user_insert(&$edit, $account, $category) {
	
	$session_id = session_id();
	$industry = vcn_get_industry();
	
	$params = array('drupal_user_id' => $account->uid, 'session_id' => $session_id, 'industry' => $industry, 'userinfo' => array('zipcode' => $edit['zipcode']));
	$call_result = vcn_rest_wrapper('vcncmasvc', 'vcncmauser', 'update-cma-user-info', $params, 'xml', 'post', false);

}

/*
 * Function is used to call the REST service to insert/update the moodle user
 */
function vcn_persist_moodle_user($action, $form_state) {
  
  global $user_info;
  
  // call the new moodle REST service for update
  $password = $form_state['values']['pass'];
  if (!strlen($password) && isset($form_state['values']['current_pass'])) {
    $password = $form_state['values']['current_pass'];
  }
  $password = md5($password);
  
  try {
    if ($action == 'insert') {
      // call the new moodle REST service for insert
      $params = array('userid' => 0, 'username' => $form_state['values']['name'], 'password' => $password, 'email' => $form_state['values']['mail']);
      $call_result = vcn_rest_wrapper('vcnmoodlesvc', 'vcnmoodle', 'insert-moodle-user', $params, 'xml', 'post', false);
    } else if ($action == 'update') {
      $params = array('userid' => $user_info['uid'], 'username' => $user_info['drupal_username'], 'password' => $password, 'email' => $form_state['values']['mail']);
      $call_result = vcn_rest_wrapper('vcnmoodlesvc', 'vcnmoodle', 'update-moodle-user', $params, 'xml', 'post', false);
    }
  } catch (Exception $e) {
    // need to log the error
    print($e->getMessage());exit;
  }
}

function vcnuser_provider_register() {
	return drupal_get_form('vcn_provider_register_form');
}

function vcn_provider_register_form($form, &$form_state) {
	
	$form = array();
	
	$form['first_name'] = array (
		'#type' => 'textfield',
		'#title' => t('First Name: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['last_name'] = array (
		'#type' => 'textfield',
		'#title' => t('Last Name: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['user_name'] = array (
		'#type' => 'textfield',
		'#title' => t('Username: '),
		'#size' => 60,
		'#required' => TRUE,
		'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, and underscores.'),	
	);
	
	$form['email'] = array (
		'#type' => 'textfield',
		'#title' => t('E-mail Address: '),
		'#size' => 60,
		'#required' => TRUE,
		'#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. 
												The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.')
	);
	
	$form['phone_number'] = array (
		'#type' => 'textfield',
		'#title' => t('Phone Number: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['title'] = array (
		'#type' => 'textfield',
		'#title' => t('Title: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['institution_name'] = array (
		'#type' => 'textfield',
		'#title' => t('Institution Name: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['institution_website'] = array (
		'#type' => 'textfield',
		'#title' => t('Institution Website: '),
		'#size' => 60,
		'#required' => TRUE,
	);
	
	$form['disclaimer'] = array (
		'#type' => 'checkbox',
		'#title' => t('<span class="strong">Disclaimer:</span> <span class="form-required" title="This field is required.">*</span></b> I certify that I am an authorized representative of the subject organization and accept full responsibility for the accuracy and completeness of the education program information provided.'),
	);
	
	$form['provider_register_submit'] = array (
		'#type' => 'submit',
		'#name' => 'provider_register_submit',
		'#value' => t('Create New Account'),
		'#attributes' => array (
				'class' => array('vcn-button',),
				'title' => "Create New Account"
		),
		'#validate' => array('_vcnuser_provider_register_validate'),
		'#submit' => array('_vcnuser_provider_registration_submit'),
	);
	
	return $form;
	
}
	
function vcnuser_preprocess_vcn_provider_register_form(&$variables) {
	drupal_add_js(drupal_get_path('module', 'vcnuser') .'/js/vcn_user_login_register.js', 'file');
	$variables['base_path'] = vcn_drupal7_base_path();
	$variables['image_path'] = vcn_image_path();
}

function vcnuser_preprocess_user_login(&$vars) {
	drupal_add_js(drupal_get_path('module', 'vcnuser') .'/js/vcn_user_login_register.js', 'file');
	$vars['base_path'] = vcn_drupal7_base_path();
	$vars['image_path'] = vcn_image_path();
	$vars['is_provider_sign_in'] = isset($_GET['type']) ? (($_GET['type'] == 'provider') ? true : false): false;
}

function vcnuser_preprocess_user_register_form(&$vars) {
	drupal_add_js(drupal_get_path('module', 'vcnuser') .'/js/vcn_user_login_register.js', 'file');
	$vars['base_path'] = vcn_drupal7_base_path();
	$vars['image_path'] = vcn_image_path();
}

function vcnuser_preprocess_user_pass(&$vars) {
	drupal_add_js(drupal_get_path('module', 'vcnuser') .'/js/vcn_user_login_register.js', 'file');
	$vars['base_path'] = vcn_drupal7_base_path();
	$vars['image_path'] = vcn_image_path();
	$vars['is_provider_sign_in'] = isset($_GET['type']) ? (($_GET['type'] == 'provider') ? true : false): false;
}

function vcnuser_preprocess_user_profile_form(&$vars) {
	drupal_add_js(drupal_get_path('module', 'vcnuser') .'/js/vcn_user_login_register.js', 'file');
}

function vcnuser_mail($key, &$message, $params) {
	switch ($key) {
		case 'provider_registration':
			$message['subject'] = $params['subject'];
			$message['body'][] = $params['body'];
			break;
		default:
			break;
	}
}

/*
 * hook_mail_alter : Update "from" email for all user related and other system email.
 * */
function vcnuser_mail_alter(&$message){	
	
	/* REST Call */
	// get vcn_support_email Id
	$params = array('prop_id' => 6);
	$content = vcn_rest_wrapper('vcnpropertiessvc', 'vcnproperties', 'get-properties', $params);
	$support_email = (string) $content->properties->item->value;
	/* End REST Call */
	
	$key = $message["key"];
	 switch ($key) {
		case 'register_no_approval_required':
			$message['from'] = $support_email;			
			break;
		default:
			$message['from'] = $support_email; 
			break;
	} 
}

/*
 * hook_user_login : Update global destination variable to redirect user to referral page.
 * */
function vcnuser_user_login(&$edit, $account) {
	//$edit['redirect'] = 'cma/profile';  // Works only for login
	if(isset($_SESSION['drupal_referral_destination']) && $_SESSION['drupal_referral_destination'] != "" && $_POST['form_id'] != 'user_pass_reset'){
		_vcnuser_get_global_destination(); //$_SESSION['drupal_referral_destination']; // works for login + register (+auto login) too
		//error_log("GLOBALS['destination']: ".print_r($GLOBALS['destination'], true), 3, ini_get('error_log'));
	}
}

// this function is used to parse the destination url and then put it in the array correctly 
// for the global destination variable so redirects work correctly when logging in
function _vcnuser_get_global_destination() {
  $urlParts = drupal_parse_url($_SESSION['drupal_referral_destination']);
  $GLOBALS['destination'][] = $urlParts['path'];
  
  if (isset($urlParts['query'])) {
    $GLOBALS['destination'][] = array('query' => $urlParts['query']);
  }
}
